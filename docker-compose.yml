version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rad-monitor
    ports:
      - "${SERVER__PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - ELASTICSEARCH__COOKIE=${ELASTICSEARCH__COOKIE}
      - ELASTICSEARCH__URL=${ELASTICSEARCH__URL:-https://usieventho-prod-usw2.es.us-west-2.aws.found.io:9243/}
      - REDIS__ENABLED=${REDIS__ENABLED:-false}
      - REDIS__URL=redis://redis:6379
      - SERVER__HOST=0.0.0.0
      - SERVER__PORT=8000
      - SERVER__WORKERS=${SERVER__WORKERS:-1}
      - SECURITY__SECRET_KEY=${SECURITY__SECRET_KEY}
    volumes:
      - ./config:/app/config:ro
      - ./assets:/app/assets:ro
      - ./index.html:/app/index.html:ro
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - rad-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: rad-monitor-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - rad-network
    profiles:
      - redis
      - production

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: rad-monitor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - rad-network
    profiles:
      - production

  # Prometheus for monitoring (production)
  prometheus:
    image: prom/prometheus:latest
    container_name: rad-monitor-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - rad-network
    profiles:
      - monitoring
      - production

  # Grafana for visualization (production)
  grafana:
    image: grafana/grafana:latest
    container_name: rad-monitor-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - rad-network
    profiles:
      - monitoring
      - production

  # Configuration CLI tool
  config-cli:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rad-monitor-config
    command: python bin/config_cli.py
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./config:/app/config
      - ./.env:/app/.env
    networks:
      - rad-network
    profiles:
      - tools

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-cache:
    driver: local

networks:
  rad-network:
    driver: bridge
